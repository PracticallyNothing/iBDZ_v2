// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iBDZ.Db;

namespace iBDZ.Web.Migrations
{
    [DbContext(typeof(iBDZDbContext))]
    [Migration("20190824150427_2_NoStats_Fix")]
    partial class _2_NoStats_Fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("iBDZ.Data.CompositionChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<int>("TrainCarId");

                    b.Property<int>("TrainId");

                    b.Property<int>("TrainStationId");

                    b.HasKey("Id");

                    b.HasIndex("TrainCarId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainStationId");

                    b.ToTable("CompositionChanges");
                });

            modelBuilder.Entity("iBDZ.Data.ConnectingLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageSpeed");

                    b.Property<bool>("Electrified");

                    b.Property<int>("Node1Id");

                    b.Property<int>("Node2Id");

                    b.HasKey("Id");

                    b.HasIndex("Node1Id");

                    b.HasIndex("Node2Id");

                    b.ToTable("ConnectingLines");
                });

            modelBuilder.Entity("iBDZ.Data.LocomotiveData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Locomotives");
                });

            modelBuilder.Entity("iBDZ.Data.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<double>("TotalLength");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("iBDZ.Data.RouteTrainStation", b =>
                {
                    b.Property<int>("RouteId");

                    b.Property<int>("TrainStationId");

                    b.Property<long>("Order");

                    b.HasKey("RouteId", "TrainStationId");

                    b.HasIndex("TrainStationId");

                    b.ToTable("RouteTrainStations");
                });

            modelBuilder.Entity("iBDZ.Data.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EndStationId");

                    b.Property<string>("IssuedTo")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("IssuedToEGN");

                    b.Property<double>("PriceLevs");

                    b.Property<long?>("SeatNumber");

                    b.Property<int>("StartStationId");

                    b.Property<DateTime>("TimeOfPurchase");

                    b.Property<long?>("TrainCarNumber");

                    b.Property<int>("TrainId");

                    b.Property<DateTime>("ValidUnitl");

                    b.HasKey("Id");

                    b.HasIndex("EndStationId");

                    b.HasIndex("StartStationId");

                    b.HasIndex("TrainId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("iBDZ.Data.Train", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Delay");

                    b.Property<int>("LocomotiveId");

                    b.Property<int>("RouteId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("LocomotiveId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("iBDZ.Data.TrainCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DataId");

                    b.Property<long>("Order");

                    b.Property<long>("Seats1");

                    b.Property<long>("Seats2");

                    b.Property<int?>("TrainId");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("TrainId");

                    b.ToTable("TrainCars");
                });

            modelBuilder.Entity("iBDZ.Data.TrainCarData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Class");

                    b.Property<bool>("HasAirConditioning");

                    b.Property<bool>("HasElectricity");

                    b.Property<bool>("HasHeating");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<int>("NumSeats");

                    b.Property<int>("NumSeatsPerDivison");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("TrainCarData");
                });

            modelBuilder.Entity("iBDZ.Data.TrainStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TrainStations");
                });

            modelBuilder.Entity("iBDZ.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("EGN");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15);

                    b.Property<string>("LastName")
                        .HasMaxLength(15);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("iBDZ.Data.CompositionChange", b =>
                {
                    b.HasOne("iBDZ.Data.TrainCar", "TrainCar")
                        .WithMany()
                        .HasForeignKey("TrainCarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iBDZ.Data.Train", "Train")
                        .WithMany("CompositionChanges")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iBDZ.Data.TrainStation", "TrainStation")
                        .WithMany()
                        .HasForeignKey("TrainStationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iBDZ.Data.ConnectingLine", b =>
                {
                    b.HasOne("iBDZ.Data.TrainStation", "Node1")
                        .WithMany()
                        .HasForeignKey("Node1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iBDZ.Data.TrainStation", "Node2")
                        .WithMany()
                        .HasForeignKey("Node2Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("iBDZ.Data.RouteTrainStation", b =>
                {
                    b.HasOne("iBDZ.Data.Route", "Route")
                        .WithMany("RouteTrainStations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iBDZ.Data.TrainStation", "TrainStation")
                        .WithMany("TrainStationRoutes")
                        .HasForeignKey("TrainStationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("iBDZ.Data.Ticket", b =>
                {
                    b.HasOne("iBDZ.Data.TrainStation", "EndStation")
                        .WithMany()
                        .HasForeignKey("EndStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iBDZ.Data.TrainStation", "StartStation")
                        .WithMany()
                        .HasForeignKey("StartStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iBDZ.Data.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iBDZ.Data.Train", b =>
                {
                    b.HasOne("iBDZ.Data.LocomotiveData", "Locomotive")
                        .WithMany()
                        .HasForeignKey("LocomotiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iBDZ.Data.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iBDZ.Data.TrainCar", b =>
                {
                    b.HasOne("iBDZ.Data.TrainCarData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("iBDZ.Data.Train", "Train")
                        .WithMany("Composition")
                        .HasForeignKey("TrainId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("iBDZ.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("iBDZ.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iBDZ.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("iBDZ.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
